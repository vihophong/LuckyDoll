//
// File generated by rootcint at Sun Oct  2 19:49:04 2016

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME CloverDictionary
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "CloverDictionary.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void CloverHit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_CloverHit(void *p = 0);
   static void *newArray_CloverHit(Long_t size, void *p);
   static void delete_CloverHit(void *p);
   static void deleteArray_CloverHit(void *p);
   static void destruct_CloverHit(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::CloverHit*)
   {
      ::CloverHit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::CloverHit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("CloverHit", ::CloverHit::Class_Version(), "./Clover.h", 17,
                  typeid(::CloverHit), ::ROOT::DefineBehavior(ptr, ptr),
                  &::CloverHit::Dictionary, isa_proxy, 4,
                  sizeof(::CloverHit) );
      instance.SetNew(&new_CloverHit);
      instance.SetNewArray(&newArray_CloverHit);
      instance.SetDelete(&delete_CloverHit);
      instance.SetDeleteArray(&deleteArray_CloverHit);
      instance.SetDestructor(&destruct_CloverHit);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::CloverHit*)
   {
      return GenerateInitInstanceLocal((::CloverHit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::CloverHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void Clover_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Clover(void *p = 0);
   static void *newArray_Clover(Long_t size, void *p);
   static void delete_Clover(void *p);
   static void deleteArray_Clover(void *p);
   static void destruct_Clover(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::Clover*)
   {
      ::Clover *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Clover >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Clover", ::Clover::Class_Version(), "./Clover.h", 34,
                  typeid(::Clover), ::ROOT::DefineBehavior(ptr, ptr),
                  &::Clover::Dictionary, isa_proxy, 4,
                  sizeof(::Clover) );
      instance.SetNew(&new_Clover);
      instance.SetNewArray(&newArray_Clover);
      instance.SetDelete(&delete_Clover);
      instance.SetDeleteArray(&deleteArray_Clover);
      instance.SetDestructor(&destruct_Clover);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::Clover*)
   {
      return GenerateInitInstanceLocal((::Clover*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Clover*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr CloverHit::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *CloverHit::Class_Name()
{
   return "CloverHit";
}

//______________________________________________________________________________
const char *CloverHit::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::CloverHit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int CloverHit::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::CloverHit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void CloverHit::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::CloverHit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *CloverHit::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::CloverHit*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr Clover::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *Clover::Class_Name()
{
   return "Clover";
}

//______________________________________________________________________________
const char *Clover::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::Clover*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Clover::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::Clover*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Clover::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::Clover*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Clover::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::Clover*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void CloverHit::Streamer(TBuffer &R__b)
{
   // Stream an object of class CloverHit.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(CloverHit::Class(),this);
   } else {
      R__b.WriteClassBuffer(CloverHit::Class(),this);
   }
}

//______________________________________________________________________________
void CloverHit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class CloverHit.
      TClass *R__cl = ::CloverHit::IsA();
      if (R__cl || R__insp.IsA()) { }
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_CloverHit(void *p) {
      return  p ? new(p) ::CloverHit : new ::CloverHit;
   }
   static void *newArray_CloverHit(Long_t nElements, void *p) {
      return p ? new(p) ::CloverHit[nElements] : new ::CloverHit[nElements];
   }
   // Wrapper around operator delete
   static void delete_CloverHit(void *p) {
      delete ((::CloverHit*)p);
   }
   static void deleteArray_CloverHit(void *p) {
      delete [] ((::CloverHit*)p);
   }
   static void destruct_CloverHit(void *p) {
      typedef ::CloverHit current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::CloverHit

//______________________________________________________________________________
void Clover::Streamer(TBuffer &R__b)
{
   // Stream an object of class Clover.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Clover::Class(),this);
   } else {
      R__b.WriteClassBuffer(Clover::Class(),this);
   }
}

//______________________________________________________________________________
void Clover::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Clover.
      TClass *R__cl = ::Clover::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fmult", &fmult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fhits", (void*)&fhits);
      R__insp.InspectMember("vector<CloverHit*>", (void*)&fhits, "fhits.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fmultAB", &fmultAB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fhitsAB", (void*)&fhitsAB);
      R__insp.InspectMember("vector<CloverHit*>", (void*)&fhitsAB, "fhitsAB.", false);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_Clover(void *p) {
      return  p ? new(p) ::Clover : new ::Clover;
   }
   static void *newArray_Clover(Long_t nElements, void *p) {
      return p ? new(p) ::Clover[nElements] : new ::Clover[nElements];
   }
   // Wrapper around operator delete
   static void delete_Clover(void *p) {
      delete ((::Clover*)p);
   }
   static void deleteArray_Clover(void *p) {
      delete [] ((::Clover*)p);
   }
   static void destruct_Clover(void *p) {
      typedef ::Clover current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::Clover

namespace ROOTDict {
   void vectorlECloverHitmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlECloverHitmUgR_Dictionary();
   static void *new_vectorlECloverHitmUgR(void *p = 0);
   static void *newArray_vectorlECloverHitmUgR(Long_t size, void *p);
   static void delete_vectorlECloverHitmUgR(void *p);
   static void deleteArray_vectorlECloverHitmUgR(void *p);
   static void destruct_vectorlECloverHitmUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<CloverHit*>*)
   {
      vector<CloverHit*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<CloverHit*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<CloverHit*>", -2, "/home/phong/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<CloverHit*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlECloverHitmUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<CloverHit*>) );
      instance.SetNew(&new_vectorlECloverHitmUgR);
      instance.SetNewArray(&newArray_vectorlECloverHitmUgR);
      instance.SetDelete(&delete_vectorlECloverHitmUgR);
      instance.SetDeleteArray(&deleteArray_vectorlECloverHitmUgR);
      instance.SetDestructor(&destruct_vectorlECloverHitmUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<CloverHit*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<CloverHit*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlECloverHitmUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<CloverHit*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlECloverHitmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<CloverHit*> : new vector<CloverHit*>;
   }
   static void *newArray_vectorlECloverHitmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<CloverHit*>[nElements] : new vector<CloverHit*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlECloverHitmUgR(void *p) {
      delete ((vector<CloverHit*>*)p);
   }
   static void deleteArray_vectorlECloverHitmUgR(void *p) {
      delete [] ((vector<CloverHit*>*)p);
   }
   static void destruct_vectorlECloverHitmUgR(void *p) {
      typedef vector<CloverHit*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<CloverHit*>

/********************************************************
* CloverDictionary.cpp
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableCloverDictionary();

extern "C" void G__set_cpp_environmentCloverDictionary() {
  G__cpp_reset_tagtableCloverDictionary();
}
#include <new>
extern "C" int G__cpp_dllrevCloverDictionary() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* CloverHit */
static int G__CloverDictionary_221_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CloverHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CloverHit[n];
     } else {
       p = new((void*) gvp) CloverHit[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CloverHit;
     } else {
       p = new((void*) gvp) CloverHit;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CloverDictionaryLN_CloverHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CloverDictionary_221_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CloverHit*) G__getstructoffset())->Clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CloverDictionary_221_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) CloverHit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CloverDictionary_221_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) CloverHit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CloverDictionary_221_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) CloverHit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CloverDictionary_221_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      CloverHit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CloverDictionary_221_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CloverHit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CloverDictionary_221_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) CloverHit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CloverDictionary_221_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) CloverHit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CloverDictionary_221_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) CloverHit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CloverDictionary_221_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) CloverHit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__CloverDictionary_221_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   CloverHit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new CloverHit(*(CloverHit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CloverDictionaryLN_CloverHit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef CloverHit G__TCloverHit;
static int G__CloverDictionary_221_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (CloverHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((CloverHit*) (soff+(sizeof(CloverHit)*i)))->~G__TCloverHit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (CloverHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((CloverHit*) (soff))->~G__TCloverHit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__CloverDictionary_221_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CloverHit* dest = (CloverHit*) G__getstructoffset();
   *dest = *(CloverHit*) libp->para[0].ref;
   const CloverHit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Clover */
static int G__CloverDictionary_222_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Clover* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Clover[n];
     } else {
       p = new((void*) gvp) Clover[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Clover;
     } else {
       p = new((void*) gvp) Clover;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CloverDictionaryLN_Clover));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CloverDictionary_222_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Clover*) G__getstructoffset())->AddHit((CloverHit*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CloverDictionary_222_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Clover*) G__getstructoffset())->AddHitAB((CloverHit*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CloverDictionary_222_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Clover*) G__getstructoffset())->SetHits(*((vector<CloverHit*>*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CloverDictionary_222_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Clover*) G__getstructoffset())->SetABHits(*((vector<CloverHit*>*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CloverDictionary_222_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Clover*) G__getstructoffset())->AddHits(*((vector<CloverHit*>*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CloverDictionary_222_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((Clover*) G__getstructoffset())->GetMult());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CloverDictionary_222_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<CloverHit*>* pobj;
         vector<CloverHit*> xobj = ((Clover*) G__getstructoffset())->GetHits();
         pobj = new vector<CloverHit*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CloverDictionary_222_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((Clover*) G__getstructoffset())->GetHit((unsigned short) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CloverDictionary_222_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Clover*) G__getstructoffset())->GetMultAB());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CloverDictionary_222_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<CloverHit*>* pobj;
         vector<CloverHit*> xobj = ((Clover*) G__getstructoffset())->GetHitsAB();
         pobj = new vector<CloverHit*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CloverDictionary_222_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((Clover*) G__getstructoffset())->GetHitAB((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CloverDictionary_222_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Clover::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CloverDictionary_222_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Clover::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CloverDictionary_222_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Clover::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CloverDictionary_222_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Clover::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CloverDictionary_222_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Clover*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CloverDictionary_222_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Clover::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CloverDictionary_222_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Clover::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CloverDictionary_222_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Clover::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CloverDictionary_222_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Clover::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__CloverDictionary_222_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Clover* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Clover(*(Clover*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CloverDictionaryLN_Clover));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Clover G__TClover;
static int G__CloverDictionary_222_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Clover*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Clover*) (soff+(sizeof(Clover)*i)))->~G__TClover();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Clover*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Clover*) (soff))->~G__TClover();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__CloverDictionary_222_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Clover* dest = (Clover*) G__getstructoffset();
   *dest = *(Clover*) libp->para[0].ref;
   const Clover& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* CloverHit */

/* Clover */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncCloverDictionary {
 public:
  G__Sizep2memfuncCloverDictionary(): p(&G__Sizep2memfuncCloverDictionary::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncCloverDictionary::*p)();
};

size_t G__get_sizep2memfuncCloverDictionary()
{
  G__Sizep2memfuncCloverDictionary a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceCloverDictionary() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CloverDictionaryLN_CloverHit))) {
     CloverHit *G__Lderived;
     G__Lderived=(CloverHit*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CloverDictionaryLN_CloverHit),G__get_linked_tagnum(&G__CloverDictionaryLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CloverDictionaryLN_Clover))) {
     Clover *G__Lderived;
     G__Lderived=(Clover*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CloverDictionaryLN_Clover),G__get_linked_tagnum(&G__CloverDictionaryLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableCloverDictionary() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__CloverDictionaryLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__CloverDictionaryLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CloverDictionaryLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__CloverDictionaryLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CloverDictionaryLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__CloverDictionaryLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__CloverDictionaryLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CloverDictionaryLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__CloverDictionaryLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CloverDictionaryLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__CloverDictionaryLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__CloverDictionaryLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__CloverDictionaryLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__CloverDictionaryLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__CloverDictionaryLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__CloverDictionaryLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__CloverDictionaryLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__CloverDictionaryLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__CloverDictionaryLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__CloverDictionaryLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__CloverDictionaryLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__CloverDictionaryLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__CloverDictionaryLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__CloverDictionaryLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__CloverDictionaryLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__CloverDictionaryLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__CloverDictionaryLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__CloverDictionaryLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__CloverDictionaryLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__CloverDictionaryLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__CloverDictionaryLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<CloverHit*>",117,G__get_linked_tagnum(&G__CloverDictionaryLN_vectorlECloverHitmUcOallocatorlECloverHitmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__CloverDictionaryLN_reverse_iteratorlEvectorlECloverHitmUcOallocatorlECloverHitmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CloverDictionaryLN_vectorlECloverHitmUcOallocatorlECloverHitmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__CloverDictionaryLN_reverse_iteratorlEvectorlECloverHitmUcOallocatorlECloverHitmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CloverDictionaryLN_vectorlECloverHitmUcOallocatorlECloverHitmUgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* CloverHit */
static void G__setup_memvarCloverHit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CloverDictionaryLN_CloverHit));
   { CloverHit *p; p=(CloverHit*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CloverDictionaryLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Clover */
static void G__setup_memvarClover(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CloverDictionaryLN_Clover));
   { Clover *p; p=(Clover*)0x1000; if (p) { }
   G__memvar_setup((void*)0,114,0,0,-1,-1,-1,2,"fmult=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CloverDictionaryLN_vectorlECloverHitmUcOallocatorlECloverHitmUgRsPgR),G__defined_typename("vector<CloverHit*>"),-1,2,"fhits=",0,(char*)NULL);
   G__memvar_setup((void*)0,114,0,0,-1,-1,-1,2,"fmultAB=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CloverDictionaryLN_vectorlECloverHitmUcOallocatorlECloverHitmUgRsPgR),G__defined_typename("vector<CloverHit*>"),-1,2,"fhitsAB=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CloverDictionaryLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarCloverDictionary() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncCloverHit(void) {
   /* CloverHit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CloverDictionaryLN_CloverHit));
   G__memfunc_setup("CloverHit",912,G__CloverDictionary_221_0_1, 105, G__get_linked_tagnum(&G__CloverDictionaryLN_CloverHit), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,G__CloverDictionary_221_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__CloverDictionary_221_0_3, 85, G__get_linked_tagnum(&G__CloverDictionaryLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&CloverHit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CloverDictionary_221_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&CloverHit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CloverDictionary_221_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&CloverHit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CloverDictionary_221_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&CloverHit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__CloverDictionaryLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CloverDictionary_221_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CloverDictionary_221_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&CloverHit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CloverDictionary_221_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&CloverHit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CloverDictionary_221_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&CloverHit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CloverDictionary_221_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&CloverHit::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("CloverHit", 912, G__CloverDictionary_221_0_15, (int) ('i'), G__get_linked_tagnum(&G__CloverDictionaryLN_CloverHit), -1, 0, 1, 1, 1, 0, "u 'CloverHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~CloverHit", 1038, G__CloverDictionary_221_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__CloverDictionary_221_0_17, (int) ('u'), G__get_linked_tagnum(&G__CloverDictionaryLN_CloverHit), -1, 1, 1, 1, 1, 0, "u 'CloverHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncClover(void) {
   /* Clover */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CloverDictionaryLN_Clover));
   G__memfunc_setup("Clover",619,G__CloverDictionary_222_0_1, 105, G__get_linked_tagnum(&G__CloverDictionaryLN_Clover), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddHit",558,G__CloverDictionary_222_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'CloverHit' - 0 - hit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddHitAB",689,G__CloverDictionary_222_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "U 'CloverHit' - 0 - hit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHits",708,G__CloverDictionary_222_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<CloverHit*,allocator<CloverHit*> >' 'vector<CloverHit*>' 0 - hits", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetABHits",839,G__CloverDictionary_222_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<CloverHit*,allocator<CloverHit*> >' 'vector<CloverHit*>' 0 - hits", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddHits",673,G__CloverDictionary_222_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<CloverHit*,allocator<CloverHit*> >' 'vector<CloverHit*>' 0 - hits", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMult",706,G__CloverDictionary_222_0_8, 114, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHits",696,G__CloverDictionary_222_0_9, 117, G__get_linked_tagnum(&G__CloverDictionaryLN_vectorlECloverHitmUcOallocatorlECloverHitmUgRsPgR), G__defined_typename("vector<CloverHit*>"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHit",581,G__CloverDictionary_222_0_10, 85, G__get_linked_tagnum(&G__CloverDictionaryLN_CloverHit), -1, 0, 1, 1, 1, 0, "r - - 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMultAB",837,G__CloverDictionary_222_0_11, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitsAB",827,G__CloverDictionary_222_0_12, 117, G__get_linked_tagnum(&G__CloverDictionaryLN_vectorlECloverHitmUcOallocatorlECloverHitmUgRsPgR), G__defined_typename("vector<CloverHit*>"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitAB",712,G__CloverDictionary_222_0_13, 85, G__get_linked_tagnum(&G__CloverDictionaryLN_CloverHit), -1, 0, 1, 1, 1, 0, "i - - 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__CloverDictionary_222_0_15, 85, G__get_linked_tagnum(&G__CloverDictionaryLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Clover::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CloverDictionary_222_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Clover::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CloverDictionary_222_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Clover::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CloverDictionary_222_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Clover::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__CloverDictionaryLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CloverDictionary_222_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CloverDictionary_222_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Clover::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CloverDictionary_222_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Clover::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CloverDictionary_222_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Clover::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CloverDictionary_222_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Clover::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Clover", 619, G__CloverDictionary_222_0_27, (int) ('i'), G__get_linked_tagnum(&G__CloverDictionaryLN_Clover), -1, 0, 1, 1, 1, 0, "u 'Clover' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Clover", 745, G__CloverDictionary_222_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__CloverDictionary_222_0_29, (int) ('u'), G__get_linked_tagnum(&G__CloverDictionaryLN_Clover), -1, 1, 1, 1, 1, 0, "u 'Clover' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncCloverDictionary() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalCloverDictionary() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcCloverDictionary() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__CloverDictionaryLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__CloverDictionaryLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__CloverDictionaryLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__CloverDictionaryLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__CloverDictionaryLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__CloverDictionaryLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__CloverDictionaryLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__CloverDictionaryLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__CloverDictionaryLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__CloverDictionaryLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__CloverDictionaryLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__CloverDictionaryLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__CloverDictionaryLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__CloverDictionaryLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__CloverDictionaryLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__CloverDictionaryLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__CloverDictionaryLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__CloverDictionaryLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__CloverDictionaryLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__CloverDictionaryLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__CloverDictionaryLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__CloverDictionaryLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__CloverDictionaryLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__CloverDictionaryLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__CloverDictionaryLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__CloverDictionaryLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__CloverDictionaryLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__CloverDictionaryLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__CloverDictionaryLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__CloverDictionaryLN_CloverHit = { "CloverHit" , 99 , -1 };
G__linked_taginfo G__CloverDictionaryLN_Clover = { "Clover" , 99 , -1 };
G__linked_taginfo G__CloverDictionaryLN_vectorlECloverHitmUcOallocatorlECloverHitmUgRsPgR = { "vector<CloverHit*,allocator<CloverHit*> >" , 99 , -1 };
G__linked_taginfo G__CloverDictionaryLN_reverse_iteratorlEvectorlECloverHitmUcOallocatorlECloverHitmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<CloverHit*,allocator<CloverHit*> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableCloverDictionary() {
  G__CloverDictionaryLN_TClass.tagnum = -1 ;
  G__CloverDictionaryLN_TBuffer.tagnum = -1 ;
  G__CloverDictionaryLN_TMemberInspector.tagnum = -1 ;
  G__CloverDictionaryLN_TObject.tagnum = -1 ;
  G__CloverDictionaryLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__CloverDictionaryLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__CloverDictionaryLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__CloverDictionaryLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__CloverDictionaryLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__CloverDictionaryLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__CloverDictionaryLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__CloverDictionaryLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__CloverDictionaryLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__CloverDictionaryLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__CloverDictionaryLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__CloverDictionaryLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__CloverDictionaryLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__CloverDictionaryLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__CloverDictionaryLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__CloverDictionaryLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__CloverDictionaryLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__CloverDictionaryLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__CloverDictionaryLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__CloverDictionaryLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__CloverDictionaryLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__CloverDictionaryLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__CloverDictionaryLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__CloverDictionaryLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__CloverDictionaryLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__CloverDictionaryLN_CloverHit.tagnum = -1 ;
  G__CloverDictionaryLN_Clover.tagnum = -1 ;
  G__CloverDictionaryLN_vectorlECloverHitmUcOallocatorlECloverHitmUgRsPgR.tagnum = -1 ;
  G__CloverDictionaryLN_reverse_iteratorlEvectorlECloverHitmUcOallocatorlECloverHitmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableCloverDictionary() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__CloverDictionaryLN_TClass);
   G__get_linked_tagnum_fwd(&G__CloverDictionaryLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__CloverDictionaryLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__CloverDictionaryLN_TObject);
   G__get_linked_tagnum_fwd(&G__CloverDictionaryLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__CloverDictionaryLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__CloverDictionaryLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__CloverDictionaryLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__CloverDictionaryLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__CloverDictionaryLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__CloverDictionaryLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__CloverDictionaryLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__CloverDictionaryLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__CloverDictionaryLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__CloverDictionaryLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__CloverDictionaryLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__CloverDictionaryLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__CloverDictionaryLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__CloverDictionaryLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__CloverDictionaryLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__CloverDictionaryLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__CloverDictionaryLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__CloverDictionaryLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__CloverDictionaryLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__CloverDictionaryLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__CloverDictionaryLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__CloverDictionaryLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__CloverDictionaryLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__CloverDictionaryLN_TMatrixTSparseDiaglEfloatgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CloverDictionaryLN_CloverHit),sizeof(CloverHit),-1,291072,(char*)NULL,G__setup_memvarCloverHit,G__setup_memfuncCloverHit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CloverDictionaryLN_Clover),sizeof(Clover),-1,291072,(char*)NULL,G__setup_memvarClover,G__setup_memfuncClover);
   G__get_linked_tagnum_fwd(&G__CloverDictionaryLN_vectorlECloverHitmUcOallocatorlECloverHitmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__CloverDictionaryLN_reverse_iteratorlEvectorlECloverHitmUcOallocatorlECloverHitmUgRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupCloverDictionary(void) {
  G__check_setup_version(30051515,"G__cpp_setupCloverDictionary()");
  G__set_cpp_environmentCloverDictionary();
  G__cpp_setup_tagtableCloverDictionary();

  G__cpp_setup_inheritanceCloverDictionary();

  G__cpp_setup_typetableCloverDictionary();

  G__cpp_setup_memvarCloverDictionary();

  G__cpp_setup_memfuncCloverDictionary();
  G__cpp_setup_globalCloverDictionary();
  G__cpp_setup_funcCloverDictionary();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncCloverDictionary();
  return;
}
class G__cpp_setup_initCloverDictionary {
  public:
    G__cpp_setup_initCloverDictionary() { G__add_setup_func("CloverDictionary",(G__incsetup)(&G__cpp_setupCloverDictionary)); G__call_setup_funcs(); }
   ~G__cpp_setup_initCloverDictionary() { G__remove_setup_func("CloverDictionary"); }
};
G__cpp_setup_initCloverDictionary G__cpp_setup_initializerCloverDictionary;

